{
  "articles": [
    {
      "path": "about.html",
      "title": "About this site",
      "description": "Some additional details about the website",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2023-10-14T18:50:06-05:00"
    },
    {
      "path": "doc_main.html",
      "title": "Documentación",
      "author": [],
      "contents": "\nR Markdown\nThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nWhen you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n\nIncluding Plots\nYou can also embed plots, for example:\n\n\n\nNote that the echo = FALSE parameter was added to the code chunk to prevent printing of the R code that generated the plot.\n\n\n\n",
      "last_modified": "2023-10-14T18:50:07-05:00"
    },
    {
      "path": "doc_R_clases_modos.html",
      "title": "Clases, modos y filtros en R",
      "description": "Formato y estructura de los diferentes objetos de datos en R - Filtrar y seleccionar elementos de los objectos de R",
      "author": [],
      "contents": "\n\nContents\n1 Objetos de datos en R\n1.1 Clases simples: vectores y matrices\n1.1.1 vector\n1.1.2 Arrays y Matrices\n\n1.2 Los modos de datos\n1.2.1 Modo logico\n1.2.2 Modo numerico\n1.2.3 Modo caracter\n1.2.4 Modo factor\n\n1.3 Clases compuestas: list y data.frame\n1.3.1 Un solo modo en los vectores y matrices\n1.3.2 Las listas\n1.3.3 Los data frames\n\n1.4 Recapitulativo de las clases de los objetos en R\n\n2 Applicar filtros a los objetos\n2.1 Filtros sobre vectores\n2.1.1 Modo logical\n2.1.2 Indices\n2.1.3 Nombres\n2.1.4 Filtros de vectores heredados\n\n2.2 Filtros sobre arrays\n2.3 Filtros sobre list\n2.3.1 El operador $\n2.3.2 El operador [[...]]\n2.3.3 Los data.frame son listas\n\n\n\n\n\n\n\n\n\necho=F, message=F,warning=F, purl=FALSE, results='hide', eval=!interactive()\ndownload_link(\n  \n)\n1 Objetos de datos en R\n1.1 Clases simples: vectores y matrices\nExisten varios tipos de objetos en R. Dentro de los más simples están\n1.1.1 vector\nUna noción central para entender el funcionamiento de R es el vector.\nUn vector es un ensamblaje de valores, y casi todos los objetos de R son vectores.\nLa forma más simple de crear un vector es la función c:\n\n\n(numeros <- c(3,1,6))\n\n[1] 3 1 6\n\nUn vector es un objeto de una dimensión, que tiene una longitud.\n\n\nlength(numeros)\n\n[1] 3\n\nLos elementos de los vectores pueden tener nombres:\n\n\nnames(numeros)<-c(\"a\",\"b\",\"c\")\nnumeros\n\na b c \n3 1 6 \n\n1.1.2 Arrays y Matrices\nExisten también objetos que tienen más de una dimensión, en R usualmente pertenecen a la familia de los arrays.\nEl objeto de la clase array más simple es la matriz, que se puede crear con la función matrix.\n\n\n(matExample <- matrix(letters[1:12],nrow=4,ncol=3))\n\n     [,1] [,2] [,3]\n[1,] \"a\"  \"e\"  \"i\" \n[2,] \"b\"  \"f\"  \"j\" \n[3,] \"c\"  \"g\"  \"k\" \n[4,] \"d\"  \"h\"  \"l\" \n\nLos arrays tienen dimensiones. Acá vamos a trabajar con arrays de 2 dimensiones pero existen arrays de más de 2 dimensiones.\n\n\ndim(matExample)\n\n[1] 4 3\n\nnrow(matExample)\n\n[1] 4\n\nncol(matExample)\n\n[1] 3\n\nLos arrays pueden tambien tener nombres de filas y nombres de columnas\n\n\ncolnames(matExample)<-c(\"A\",\"B\",\"C\")\nrownames(matExample)<-c(\"fila1\",\"fila2\",\"fila3\",\"fila4\")\nmatExample\n\n      A   B   C  \nfila1 \"a\" \"e\" \"i\"\nfila2 \"b\" \"f\" \"j\"\nfila3 \"c\" \"g\" \"k\"\nfila4 \"d\" \"h\" \"l\"\n\n1.2 Los modos de datos\nEn R existen varios modos que corresponden a varios tipos de datos que se pueden manejar, y que se almacenan de manera diferente en la memoria del computador.\nPor ejemplo, los objetos numeros y matExample tienen modos diferentes:\n\n\nmode(numeros)\n\n[1] \"numeric\"\n\nmode(matExample)\n\n[1] \"character\"\n\n1.2.1 Modo logico\nEl modo más simple y más ligero es el modo de logica booleana logical, puede contener los valores TRUE y FALSE\n\n\n(vecLog <- c(T,F,F,T,T))\n\n[1]  TRUE FALSE FALSE  TRUE  TRUE\n\nmode(vecLog)\n\n[1] \"logical\"\n\n1.2.2 Modo numerico\nExisten los modos numéricos, así como en el objeto numeros. Los objetos de modo numérico tienen varías precisiones y forma de almacenamiento. Los más importantes para conocer son los números enteros (integer) y los números generales (numeric que pueden ser de tipos single precision y double precision).\n\n\n(numInt <- c(5L,3L,1L))\n\n[1] 5 3 1\n\nis.integer(numInt)\n\n[1] TRUE\n\n(numOtros <- c(8.1837, 6.94785, 5, 17/9))\n\n[1] 8.183700 6.947850 5.000000 1.888889\n\nis.integer(numOtros)\n\n[1] FALSE\n\n1.2.3 Modo caracter\nLuego podemos mencionar los objetos de modo “character”, como en la matriz matExample.\nLos objetos de tipo character pueden almacenar cadenas de caracter con varías letras y simbolos alphanumericos:\n\n\n(vecCar <- c(\"palabras\",\"con espacio\", \"o numeros 123\", \"o otras cosa [^\"))\n\n[1] \"palabras\"        \"con espacio\"     \"o numeros 123\"  \n[4] \"o otras cosa [^\"\n\nmode(vecCar)\n\n[1] \"character\"\n\nnchar(vecCar)\n\n[1]  8 11 13 15\n\nAnotar: el modo caracter es el modo más pesado para la memoria en R.\nSi tienen problemas de memoria limitada en un script es mejor evitarlos…\n1.2.4 Modo factor\nFinalmente existe el modo factor, para almacenar variables con un numero de posibilidades de valores limitado.\n\n\n(factorExample <- factor(c(\"Sí\",\"No\",\"Sí\",\"Tal vez\"),levels=c(\"Sí\",\"No\",\"Tal vez\")))\n\n[1] Sí      No      Sí      Tal vez\nLevels: Sí No Tal vez\n\nmode(factorExample)\n\n[1] \"numeric\"\n\nAnotar: R almacena los factores como numéricos en memoria:\n\n\nas.numeric(factorExample)\n\n[1] 1 2 1 3\n\nPermite economizar mucho espacio en memoria, pero también puede ser la raíz de errores difíciles de detectar en un código, cuidado!\nNB: para que lo sepan, existen otros modos como los números complejos, pero son poco útiles en la gestión de datos de biodiversidad\n1.3 Clases compuestas: list y data.frame\n1.3.1 Un solo modo en los vectores y matrices\nLos vectores y matrices solo pueden contener datos de un modo:\n\n\n(vecTestMode <- c(T, 1L, 4.14, \"palabra\"))\n\n[1] \"TRUE\"    \"1\"       \"4.14\"    \"palabra\"\n\nmode(vecTestMode)\n\n[1] \"character\"\n\nAnotar: lo que pasó con este vector es que todo se volvió character porque este modo puede integrar los demás (logical < factor < numeric < character).\n1.3.2 Las listas\nExisten una clase de objetos que pueden mezclar diferentes modos: la clase list.\nUna list es un vector de otros objetos.\nSe puede crear con la función list\n\n\n(list1 <- list(numeros, matExample))\n\n[[1]]\na b c \n3 1 6 \n\n[[2]]\n      A   B   C  \nfila1 \"a\" \"e\" \"i\"\nfila2 \"b\" \"f\" \"j\"\nfila3 \"c\" \"g\" \"k\"\nfila4 \"d\" \"h\" \"l\"\n\nSe pueden también poner nombres a los sub-objetos de la list en la creación del objeto:\n\n\n(list1_withNames <- list(numeros=numeros, `Un ejemplo de matriz`=matExample))\n\n$numeros\na b c \n3 1 6 \n\n$`Un ejemplo de matriz`\n      A   B   C  \nfila1 \"a\" \"e\" \"i\"\nfila2 \"b\" \"f\" \"j\"\nfila3 \"c\" \"g\" \"k\"\nfila4 \"d\" \"h\" \"l\"\n\n1.3.3 Los data frames\nExiste un caso particular de list: el data.frame.\nEs una list de vectors que tienen todos la misma longitud.\nDado que es una list, cada uno de los vectores puede tener un modo diferente.\nTambién es un array: es decir que los vectors, que tienen todos la misma longitud, representan las columnas de una tabla.\n\n\n(DF_example <- data.frame(\n  country=c(\"Chile\",\"Colombia\",\"Francia\"),\n  surAmerica=c(T,T,F),\n  superficie_km2=c(756626,1142000,549134)\n))\n\n   country surAmerica superficie_km2\n1    Chile       TRUE         756626\n2 Colombia       TRUE        1142000\n3  Francia      FALSE         549134\n\n1.4 Recapitulativo de las clases de los objetos en R\n\n\nTable 1: Tipos principales de objetos, y sus caracteristicas heredadas. La columna modo unico indica si el objeto solo puede contenir datos de un modo (ver noción de atomic mode).\n\n\n\n\nvector\n\n\narray\n\n\nmodo.único\n\n\nlist\n\n\nvector\n\n\nTRUE\n\n\nFALSE\n\n\nTRUE\n\n\nFALSE\n\n\nmatriz\n\n\nTRUE\n\n\nTRUE\n\n\nTRUE\n\n\nFALSE\n\n\nlist\n\n\nTRUE\n\n\nFALSE\n\n\nFALSE\n\n\nTRUE\n\n\ndata.frame\n\n\nFALSE\n\n\nTRUE\n\n\nFALSE\n\n\nTRUE\n\n\nLa tabla 1 contiene las características principales de las clases de objetos principales en R (anotar: existen otras clases de objetos, pero esas son las clases de objetos más comunes para almacenar datos).\nPara los que quieren ir más allá en la comprensión de la tabla 1: el lenguaje de programación R es un lenguaje de programación orientado a objeto.\nEso implica que el tratamiento del objeto en el lenguaje va a depender de características que cada objeto va a heredar de familias de objetos que se llaman clases (classes).\nPor ejemplo, los objetos matrix en R heredan las características de las clases vector y array.\nBasicamente, una matrix es un vector que tiene dos dimensiones (filas y columnas).\nPor esa razon, tiene una longitud, como todos los vectores, pero tambien un numero de filas y un numero de columnas, como todos los arrays:\n\n\nlength(matExample)\n\n[1] 12\n\nnrow(matExample)\n\n[1] 4\n\nUn data.frame hereda las caracteristicas de los list. Además, hereda las características de los arrays!\n2 Applicar filtros a los objetos\nPara filtrar objetos en R, se utilizan los operadores de tipo [...].\nEsos operadores aceptan 3 tipos de filtros:\nun vector de modo logical que indica con valores TRUE/FALSE cuales son los elementos que queremos guardar\nun vector de modo integer que indica los indices de los elementos que queremos guardar\nun vector de modo character que indica los nombres de los elementos que queremos guardar\n2.1 Filtros sobre vectores\n2.1.1 Modo logical\n\n\nnumeros\n\na b c \n3 1 6 \n\nnumeros[c(T,F,T)]\n\na c \n3 6 \n\nSi el vector utilizado en el filtro tiene una longitud inferior al vector que queremos filtrar, los valores están repetidos hasta obtener la longitud final\n\n\nfactorExample\n\n[1] Sí      No      Sí      Tal vez\nLevels: Sí No Tal vez\n\nfactorExample[c(F, T)]\n\n[1] No      Tal vez\nLevels: Sí No Tal vez\n\nPor ejemplo, para conocer todos los múltiples de 3 entre 1 y 100:\n\n\n(mul3 <- (1:100)[c(F, F, T)])\n\n [1]  3  6  9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66\n[23] 69 72 75 78 81 84 87 90 93 96 99\n\n2.1.1.1 Operadores logicos\nVarios operadores permiten obtener vectores logicos, por ejemplo:\n==: es igual a\n!=: es diferente de\n>, >=: es superior a, es superior o igual a\n>, >=: es inferior a, es inferior o igual a\n& : operador booleano y\n|: operador booleano o\n!: operador booleano no\nAsí, todos esos operadores se pueden utilizar en los filtros logicos:\n\n\nnumeros >= 2\n\n    a     b     c \n TRUE FALSE  TRUE \n\nnumeros[numeros >= 2]\n\na c \n3 6 \n\nnumeros[numeros >= 2 & numeros != 6]\n\na \n3 \n\nnumeros[!(numeros >= 2 & numeros != 6)]\n\nb c \n1 6 \n\n2.1.2 Indices\n\n\nnumeros[2:3]\n\nb c \n1 6 \n\nPermite cambiar el orden de los vectores:\n\n\nnumeros[length(numeros):1]\n\nc b a \n6 1 3 \n\nPodemos tambien repetir elementos\n\n\nnumeros[c(1:3,2)]\n\na b c b \n3 1 6 1 \n\n2.1.3 Nombres\n\n\nnumeros[c(\"a\",\"c\")]\n\na c \n3 6 \n\n2.1.4 Filtros de vectores heredados\nVimos antes que una matriz es un “vector con dimensiones”, así que los filtros de vectores se pueden aplicar:\n\n\nmatExample\n\n      A   B   C  \nfila1 \"a\" \"e\" \"i\"\nfila2 \"b\" \"f\" \"j\"\nfila3 \"c\" \"g\" \"k\"\nfila4 \"d\" \"h\" \"l\"\n\nmatExample[c(T,T,F,T)]\n\n[1] \"a\" \"b\" \"d\" \"e\" \"f\" \"h\" \"i\" \"j\" \"l\"\n\nAnotar: el orden del vector incluido en la matriz es por columna, así que lo que hicímos con este filtro es buscar el vector de valores que excluye la fila 3.\nTambien vimos que las list son vectores de objetos, los filtros de vectores funcionan tambien sobre esos objetos:\n\n\nlist1_withNames[\"numeros\"]\n\n$numeros\na b c \n3 1 6 \n\nAnotar también que las filas o las columnas de un array son vectores, entonces se pueden aplicar los filtros de vectores sobre la extracción de columnas y filas de array, como los data.frame.\n2.2 Filtros sobre arrays\nEn los casos de los arrays, se pueden aplicar filtros sobre filas y columnas. También funcionan con el operador [...], solo se separan por una coma:\n\n\nmatExample\n\n      A   B   C  \nfila1 \"a\" \"e\" \"i\"\nfila2 \"b\" \"f\" \"j\"\nfila3 \"c\" \"g\" \"k\"\nfila4 \"d\" \"h\" \"l\"\n\nmatExample[2:3,c(T,F,T)]\n\n      A   C  \nfila2 \"b\" \"j\"\nfila3 \"c\" \"k\"\n\nCuando se utiliza la coma, pero el filtro de columna o fila es vacío entonces corresponde a guardar todos los elementos de la dimensión sin filtro:\n\n\nDF_example\n\n   country surAmerica superficie_km2\n1    Chile       TRUE         756626\n2 Colombia       TRUE        1142000\n3  Francia      FALSE         549134\n\nDF_example[,\"surAmerica\"]\n\n[1]  TRUE  TRUE FALSE\n\nDF_example[DF_example[,\"surAmerica\"],]\n\n   country surAmerica superficie_km2\n1    Chile       TRUE         756626\n2 Colombia       TRUE        1142000\n\nEn este ejemplo utilizamos un filtro logico extraído de la columna surAmerica para aplicarlo sobre las filas de la tabla misma.\n2.3 Filtros sobre list\nPara las list existen operadores particulares: $ y [[...]]\n2.3.1 El operador $\nEl operador $ permite extraer un elemento de la list con su nombre:\n\n\nlist1_withNames$numeros\n\na b c \n3 1 6 \n\nCuando los nombres de los elementos tienen espacios o caracteres particulares, el operador se puede utilizar con el caracter `\n\n\nlist1_withNames$`Un ejemplo de matriz`\n\n      A   B   C  \nfila1 \"a\" \"e\" \"i\"\nfila2 \"b\" \"f\" \"j\"\nfila3 \"c\" \"g\" \"k\"\nfila4 \"d\" \"h\" \"l\"\n\n2.3.2 El operador [[...]]\nOtra forma de extraer un elemento de una list es utilizar el operador [[...]].\n\n\nlist1_withNames[[1]]\n\na b c \n3 1 6 \n\nlist1_withNames[[\"Un ejemplo de matriz\"]]\n\n      A   B   C  \nfila1 \"a\" \"e\" \"i\"\nfila2 \"b\" \"f\" \"j\"\nfila3 \"c\" \"g\" \"k\"\nfila4 \"d\" \"h\" \"l\"\n\nAnotar: la diferencia entre [...] y [[...]] es que la primera solución envía una lista, y la segunda envia el contenido del elemento.\n\n\nlist1_withNames[1]\n\n$numeros\na b c \n3 1 6 \n\nis.list(list1_withNames[1])\n\n[1] TRUE\n\nlist1_withNames[[1]]\n\na b c \n3 1 6 \n\nis.list(list1_withNames[[1]])\n\n[1] FALSE\n\n2.3.3 Los data.frame son listas\nNo olvidar que los data.frames heredan las caracteristicas de las list:\n\n\nDF_example[[\"country\"]]\n\n[1] \"Chile\"    \"Colombia\" \"Francia\" \n\nDF_example[DF_example$surAmerica,]$superficie_km2\n\n[1]  756626 1142000\n\n\n\n\n",
      "last_modified": "2023-10-14T18:50:08-05:00"
    },
    {
      "path": "index.html",
      "title": "My Website",
      "description": "Welcome to the website. I hope you enjoy it!\n",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2023-10-14T18:50:09-05:00"
    }
  ],
  "collections": []
}
